C51 COMPILER V9.53.0.0   MUSIC                                                             12/10/2014 18:11:43 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MUSIC
OBJECT MODULE PLACED IN music.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE music.c OPTIMIZE(8,SPEED) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "project2.h"
   2          
   3          /**********************************************************
   4            * Star Wars theme arrays
   5          **********************************************************/
   6          code unsigned int star_hz[42] = {F5, F5, F5, BF5, F6, EF6, D6, C6, BF6, F6, EF6, D6, C6, BF6, F6, EF6, D6,
             - EF6, C6, F5, F5, F5, BF5, F6, EF6, D6, C6, BF6, F6, EF6, D6, C6, BF6, F6, C7, BF6, A6, BF6, BF5, BF5, BF5, BF5};
   7          code unsigned char star_dur[42] = {E3, E3, E3, H, H, E3, E3, E3, H, Q, E3, E3, E3, H, Q, E3, E3, E3, H, E3
             -, E3, E3, H, H, E3, E3, E3, H, Q, E3, E3, E3, H, Q, E3, E3, E3, Q, E3, E3, E3, Q};
   8          code unsigned char star_name[9] = "Star Wars";
   9          
  10          /**********************************************************
  11            * Sorceror's Apprentice theme arrays
  12          **********************************************************/
  13          code unsigned int sorc_hz[57] = {F5, C6, C5, D5, E5, F5, AF5, F5, AF5, G5, F5, E5, F5, AF5, F5, AF5, G5, F
             -5, E5, F5, AF5, F5, AF5, G5, F5, G5, AF5, G5, BF5, AF5, G5, B5, F5, AF5, G5, BF5, AF5, G5, B5, F5, AF5, BF5, C6, C6, C6,
             - C6, D6, E6, F6, E6, F6, G6, C6, D6, E6, F6, F5};
  14          code unsigned char sorc_dur[57] = {DQ, DQ, E, E, E, Q, E, Q, E, E, E, E, Q, E, Q, E, E, E, E, Q, E, E, E, 
             -E, E, E, E, E, E, E, Q, E, Q, E, E, E, E, Q, E, E, E, E, E, E, E, E, E, E, E, E, E, DQ, E, E, E, DQ, DQ};
  15          code unsigned char sorc_name[21] = "Sorceror's Apprentice";
  16          
  17          /**********************************************************
  18            * Length of songs
  19          **********************************************************/
  20          code unsigned char notes[2] = {42, 57};
  21          
  22          /**********************************************************
  23            * playSong
  24            * @desc   Plays the selected song
  25            *
  26            * @param1 The song to be played
  27          **********************************************************/
  28          bool playSong(Song s)
  29          {
  30   1        bool x = true;
  31   1        switch (s)
  32   1        {
  33   2          case STAR:
  34   2            transmit(star_name, 9);
  35   2            x = play_song(star_hz, star_dur, notes[0]);
  36   2            break;
  37   2            
  38   2          case SORC:
  39   2            transmit(sorc_name, 21);
  40   2            x = play_song(sorc_hz, sorc_dur, notes[1]);
  41   2            break;
  42   2        }
  43   1        return x;
  44   1      }
  45          
  46          /**********************************************************
  47            * play_song
  48            * @desc   Plays the song corresponding to the arrays given
  49            *
  50            * @param1 Array of frequencies
C51 COMPILER V9.53.0.0   MUSIC                                                             12/10/2014 18:11:43 PAGE 2   

  51            * @param2 Array of note durations
  52            * @param3 Number of notes in the song
  53          **********************************************************/
  54          bool play_song(unsigned int hz[], unsigned char dur[], unsigned char length)
  55          {
  56   1        unsigned char i;
  57   1        bool x;
  58   1        
  59   1        IEN0 |= 0x88;
  60   1        TMOD = 0x10;
  61   1        TH1 = 0x00;
  62   1        TL1 = 0x00;
  63   1        TR1 = 1;
  64   1        
  65   1        for (i = 0; i < length; ++i)
  66   1        {
  67   2          play_small_delay();
  68   2          x = play_note(hz[i], dur[i]);
  69   2          if (x == false)
  70   2          {
  71   3            IEN0 &= ~0x08;
  72   3            TR1 = 0;
  73   3            clearLED();
  74   3            return false;
  75   3          }
  76   2        }
  77   1        
  78   1        TR1 = 0;
  79   1        IEN0 &= ~0x08;
  80   1        clearLED();
  81   1        return true;
  82   1      }
  83          
  84          /**********************************************************
  85            * play_note
  86            * @desc   Plays a note at the given frequency
  87            *         with the given duration.
  88            *         Also has a pseudo-interrupt (with polling)
  89            *         for switching modes during the note
  90            *
  91            * @param1 Frequency of the note
  92            * @param2 Duration of the note in 18ths of
  93            *         a second
  94          **********************************************************/
  95          bool play_note(unsigned int hz, unsigned char dur)
  96          {
  97   1        unsigned int i, time;
  98   1        unsigned char high, low;
  99   1        
 100   1        time = hz * dur / 18;
 101   1        i = 0xFFFF - 61425 / hz*30 + 1;
 102   1        high = i / 256;
 103   1        low = i % 256;
 104   1        
 105   1        TMOD = TMOD & 0xf0;
 106   1        TMOD = TMOD | 0x01;
 107   1        
 108   1        for (i = 0; i < time; ++i)
 109   1        {
 110   2          TH0 = high;
 111   2          TL0 = low;
 112   2          TR0 = 1;
C51 COMPILER V9.53.0.0   MUSIC                                                             12/10/2014 18:11:43 PAGE 3   

 113   2          while (TF0 == 0)
 114   2          {
 115   3            if(SW9 == 0)
 116   3              return false;
 117   3          }
 118   2          TR0 = 0;
 119   2          TF0 = 0;
 120   2          SPK = ~SPK;
 121   2        }
 122   1        return true;
 123   1      }
 124          
 125          /**********************************************************
 126            * play_small_delay
 127            * @desc   Very short delay function
 128            *         to distinguish between notes
 129            *         of the song, especially
 130            *         repeated notes of the same
 131            *         frequency
 132          **********************************************************/
 133          void play_small_delay()
 134          {
 135   1        TMOD = TMOD & 0xf0;
 136   1        TMOD = TMOD | 0x01;
 137   1        TH0 = 0x00;
 138   1        TL0 = 0x00;
 139   1        TR0 = 1;
 140   1        while(TF0 == 0);
 141   1        TR0 = 0;
 142   1        TF0 = 0;
 143   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    315    ----
   CONSTANT SIZE    =    329    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
