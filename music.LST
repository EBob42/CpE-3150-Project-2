C51 COMPILER V9.53.0.0   MUSIC                                                             12/02/2014 14:59:21 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MUSIC
OBJECT MODULE PLACED IN music.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE music.c OPTIMIZE(8,SPEED) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "project2.h"
   2          
   3          //TODO: Actually make these songs
   4          code unsigned int star_hz[42] = {F5, F5, F5, BF5, F6, EF6, D6, C6, BF6, F6, EF6, D6, C6, BF6, F6, EF6, D6,
             - EF6, C6, F5, F5, F5, BF5, F6, EF6, D6, C6, BF6, F6, EF6, D6, C6, BF6, F6, C7, BF6, A6, BF6, BF5, BF5, BF5, BF5};
   5          code unsigned char star_dur[42] = {E3, E3, E3, H, H, E3, E3, E3, H, Q, E3, E3, E3, H, Q, E3, E3, E3, H, E3
             -, E3, E3, H, H, E3, E3, E3, H, Q, E3, E3, E3, H, Q, E3, E3, E3, Q, E3, E3, E3, Q};
   6          code char star_name[9] = "Star Wars";
   7          
   8          code unsigned int sorc_hz[57] = {F5, C6, C5, D5, E5, F5, AF5, F5, AF5, G5, F5, E5, F5, AF5, F5, AF5, G5, F
             -5, E5, F5, AF5, F5, AF5, G5, F5, G5, AF5, G5, BF5, AF5, G5, B5, F5, AF5, G5, BF5, AF5, G5, B5, F5, AF5, BF5, C6, C6, C6,
             - C6, D6, E6, F6, E6, F6, G6, C6, D6, E6, F6, F5};
   9          code unsigned char sorc_dur[57] = {DQ, DQ, E, E, E, Q, E, Q, E, E, E, E, Q, E, Q, E, E, E, E, Q, E, E, E, 
             -E, E, E, E, E, E, E, Q, E, Q, E, E, E, E, Q, E, E, E, E, E, E, E, E, E, E, E, E, E, DQ, E, E, E, DQ, DQ};
  10          code char sorc_name[21] = "Sorceror's Apprentice";
  11            
  12          code unsigned int poke_hz[1] = {1000};
  13          code unsigned char poke_dur[1] = {Q};
  14          code char poke_name[7] = "Pokemon";
  15            
  16          code unsigned char notes[3] = {42, 57, 1};
  17          
  18          bool playSong(Song s)
  19          {
  20   1        bool x = true;
  21   1        switch (s)
  22   1        {
  23   2          case STAR:
  24   2            transmit(star_name, 9);
  25   2            x = play_song(star_hz, star_dur, notes[1]);
  26   2            break;
  27   2            
  28   2          case SORC:
  29   2            transmit(sorc_name, 21);
  30   2            x = play_song(sorc_hz, sorc_dur, notes[1]);
  31   2            break;
  32   2            
  33   2          case POKE:
  34   2            transmit(poke_name, 7);
  35   2            x = play_song(poke_hz, poke_dur, notes[2]);
  36   2            break;
  37   2        }
  38   1        return x;
  39   1      }
  40          
  41          bool play_song(unsigned int hz[], unsigned char dur[], unsigned char length)
  42          {
  43   1        unsigned char i;
  44   1        bool x;
  45   1        for (i = 0; i < length; ++i)
  46   1        {
  47   2          play_small_delay();
  48   2          x = play_note(hz[i], dur[i]);
  49   2          if (x == false)
  50   2            return false;
C51 COMPILER V9.53.0.0   MUSIC                                                             12/02/2014 14:59:21 PAGE 2   

  51   2        }
  52   1        return true;
  53   1      }
  54          
  55          bool play_note(unsigned int hz, unsigned char dur)
  56          {
  57   1        unsigned int i, time;
  58   1        unsigned char high, low;
  59   1        
  60   1        time = hz * dur / 18;
  61   1        i = 307125 / hz;
  62   1        high = i / 256;
  63   1        low = i % 256;
  64   1        
  65   1        TMOD = TMOD & 0xf0;
  66   1        TMOD = TMOD | 0x01;
  67   1        
  68   1        for (i = 0; i < time; ++i)
  69   1        {
  70   2          TH0 = high;
  71   2          TL0 = low;
  72   2          TR0 = 1;
  73   2          while (TF0 == 0)
  74   2          {
  75   3            //TODO: Verify if this button choice works
  76   3            if(SW9 == 0)
  77   3              return false;
  78   3          }
  79   2          TR0 = 0;
  80   2          TF0 = 0;
  81   2          SPK = ~SPK;
  82   2        }
  83   1        return true;
  84   1      }
  85          
  86          void play_small_delay()
  87          {
  88   1        TMOD = TMOD & 0xf0;
  89   1        TMOD = TMOD | 0x02;
  90   1        TH0 = 0x00;
  91   1        TR0 = 1;
  92   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    311    ----
   CONSTANT SIZE    =    340    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
