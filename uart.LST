C51 COMPILER V6.02  UART                                                                   11/18/2014 16:43:04 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\uart.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\uart.c DEBUG OBJECTEXTEND

stmt level    source

   1          /***********************************************************************
   2          MODULE:    UART
   3          VERSION:   1.03
   4          CONTAINS:  Routines for controlling the UART peripheral on the Philips
   5                     P89LPC932
   6          COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7          LICENSE:   May be freely used in commercial and non-commercial code
   8                     without royalties provided this copyright notice remains
   9                     in this file and unaltered
  10          WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11                     MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12                     TO CHANGE THE CONTENTS OF THIS FILE
  13          GENERATED: On "Jun 24 2003" at "10:17:56" by Code Architect 2.01
  14          ***********************************************************************/
  15          
  16          // SFR description needs to be included
  17          #include <reg932.h>
  18          #include "uart.h"
  19          
  20          // flag that indicates if the UART is busy transmitting or not
  21          static bit mtxbusy;
  22          
  23          /***********************************************************************
  24          DESC:    Initializes UART for mode 1
  25                   Baudrate: 9600
  26                   Uses Baud Rate Generator
  27          RETURNS: Nothing
  28          CAUTION: If interrupts are being used then EA must be set to 1
  29                   after calling this function
  30          ************************************************************************/
  31          void uart_init(void)
  32          {
  33   1        unsigned int BRG_Val;
  34   1        // configure UART
  35   1        // clear SMOD0 to access SM0 (UART mode bit) in SCON
  36   1        PCON &= ~0x40;
  37   1        // Set to UART mode 1 and enable reception
  38   1        // Also clears the RI and TI flags
  39   1        SCON = 0x50;
  40   1        // clear SMOD1
  41   1        PCON &= 0x7f;
  42   1        // set SMOD1 (not used)
  43   1        // PCON |= (1 << 8);
  44   1        // Clear any status flags and set for a combine RI/TI interrupt
  45   1        SSTAT = 0x00;
  46   1      
  47   1        // enable break detect
  48   1        AUXR1 |= 0x40;
  49   1      
  50   1        // configure baud rate generator
  51   1        BRG_Val=(unsigned int)(OSC_FREQ/9600UL);
  52   1        BRG_Val=BRG_Val-16;
  53   1        BRGCON = 0x00;
  54   1        BRGR1 = BRG_Val>>8;
  55   1        BRGR0 = (unsigned char)(BRG_Val&0xff);
C51 COMPILER V6.02  UART                                                                   11/18/2014 16:43:04 PAGE 2   

  56   1        BRGCON = 0x03;
  57   1      
  58   1        // TxD = push-pull, RxD = input
  59   1        P1M1 &= ~0x01;
  60   1        P1M2 |= 0x01;
  61   1        P1M1 |= 0x02;
  62   1        P1M2 &= ~0x02;
  63   1      
  64   1        // initially not busy
  65   1        mtxbusy = 0;
  66   1      
  67   1        // set isr priority to 0
  68   1        IP0 &= 0xEF;
  69   1        IP0H &= 0xEF;
  70   1        // enable uart interrupt
  71   1        ES = 1;
  72   1      
  73   1      } // uart_init
  74          
  75          /***********************************************************************
  76          DESC:    UART Interrupt Service Routine
  77          RETURNS: Nothing
  78          CAUTION: uart_init must be called first
  79                   EA must be set to 1
  80          ************************************************************************/
  81          void uart_isr(void) interrupt 4 using 1
  82          {
  83   1        if (RI)
  84   1        {
  85   2          // clear interrupt flag
  86   2          RI = 0;
  87   2        } // if
  88   1      
  89   1        if (TI)
  90   1        {
  91   2          // clear interrupt flag
  92   2          TI = 0;
  93   2          // no longer busy
  94   2          mtxbusy = 0;
  95   2        } // if
  96   1      
  97   1      } // uart_isr
  98          
  99          /***********************************************************************
 100          DESC:    Transmits a 8-bit value via the UART in the current mode
 101                   May result in a transmit interrupt if enabled.
 102          RETURNS: Nothing
 103          CAUTION: uart_init must be called first
 104          ************************************************************************/
 105          void uart_transmit(unsigned char value)  // data to transmit
 106          {
 107   1        while(mtxbusy);
 108   1        mtxbusy = 1;
 109   1        SBUF = value;
 110   1      } // uart_transmit
 111          
 112          /***********************************************************************
 113          DESC:    Gets a received 8-bit value from the UART
 114          RETURNS: Received data
 115          CAUTION: uart_init must be called first
 116          ************************************************************************/
 117          unsigned char uart_get(void)
C51 COMPILER V6.02  UART                                                                   11/18/2014 16:43:04 PAGE 3   

 118          {
 119   1        return SBUF;
 120   1      } // uart_get
 121          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     85    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
